# Here is a sample .yaml file that can be used
# to store the metadata necessary to run the
# SO BB pipeline.

# Define the directories
## Let's start with directories of data products
data_dirs:
  root: "../data"
  map_directory: "maps"
  beam_directory: "beams"
  bandpasses_directory: "bandpasses"
## Then directories in which we will store outputs
output_dirs:
  root: "../outputs"
  mask_directory: "masks"
  pre_process_directory: "pre_processing"
  sims_directory: "sims"
  cell_transfer_directory: "cells_transfer"
  cell_data_directory: "cells_data"
  cell_sims_directory: "cells_sims"
  coupling_directory: "couplings"
  covmat_directory: "covariances"

##################################
#    Metadata related to maps    #
# ------------------------------ #
#                                #
# The structure of input splits  #
# is the following:              #
#                                #
# tag:                           #
#   file_root: ...               #
#   n_splits: ...                #
#   freq_tag: ...                #
#   exp_tag: ...                 #
##################################
map_sets:
  SAT1_f093:
    file_root: "cmb_sat1_f093"
    n_splits: 3          # Number of splits
    freq_tag: 93         # Freq. tag (e.g. useful to coadd freqs)
    exp_tag: "SAT1"      # Experiment tag (useful to get noise-bias free cross-split spectra)
  SAT1_f145:
    file_root: "cmb_sat1_f145"
    n_splits: 3
    freq_tag: 145
    exp_tag: "SAT1"

####################
# Masking metadata #
####################
masks:
  # Load nhits map from disk? Give absolute location here.
  # If left blank, the mask handler will download the nominal nhits map.
  input_nhits_path:

  # Copies of all masks are stored under these names inside mask_directory
  analysis_mask: "analysis_mask.fits"
  nhits_map: "nhits_map.fits"
  binary_mask: "binary_mask.fits"
  galactic_mask_root: "planck_galactic_mask"
  point_source_mask: "point_source_mask.fits"

  include_in_mask: []
  gal_mask_mode: "gal070"
  apod_radius: 10.0
  apod_radius_point_source: 4.0
  apod_type: "C1"

####################################
# Metadata related to the analysis #
####################################
## General parameters
general_pars:
  nside: 256
  lmin: 30
  lmax: 600
  deltal: 10
  binning_file: "binning.npz"
  pure_B: True

## Simulation related
sim_pars:
  anisotropic_noise: False
  null_e_modes: False
  num_sims: 3
  cosmology:
    cosmomc_theta: 0.0104085
    As: 2.1e-9
    ombh2: 0.02237
    omch2: 0.1200
    ns: 0.9649
    Alens: 1.0
    tau: 0.0544
    r: 0.01
  mock_nsrcs: 80
  mock_srcs_hole_radius: 40

## Filtering settings
filtering:
  filtering_type: "m_filter"  # "m_filterer" or "toast"
  m_cut: 30  # necessary only if `filtering_type` is set to "m_filterer"
  toast: # necessary only if `filtering.type` is set to "toast"
    template: "../paramfiles/run_toast.sh.j2"            # TOAST template script.
    config: "../paramfiles/defaults.toml"                # TOAST toml config file
    schedule: "../outputs/schedules/schedule_sat.txt"    # TOAST schedule file
    scripts_dir: "../sbatch"                             # directory of filtering scripts
    tf_instrument: "SAT1"                                # Instrument used for transfer function calculation
    tf_band: "SAT_f090"                                  # Band used for transfer function calculation
    slurm: False                                         # Run TOAST filtering locally or with SLURM scheduller
    # `slurm_autosubmit` only works if `slurm` is True.
    # `slurm_autosubmit` set to True to auto-submit generated sbatch scripts.
    # Set to False would generate scripts but not submitted, give you a chance to check generated scripts.
    slurm_autosubmit: False

## Filtering transfer function related parameters
tf_settings:
  tf_est_num_sims: 4

  power_law_pars_tf_est:
    amp: 1.0
    delta_ell: 10
    power_law_index: 2.

  power_law_pars_tf_val:
    amp:
      TT: 10.
      EE: 1.
      BB: 0.05
      TE: 2.5
      TB: 0.
      EB: 0.
    delta_ell: 10
    power_law_index: 0.5
